// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STAFF
  INSTITUTION_ADMIN
  SUPER_ADMIN
}

enum SubscriptionStatus {
  ACTIVE
  SUSPENDED
  CANCELLED
  PENDING
}

enum PayslipStatus {
  PROCESSING
  AVAILABLE
  FAILED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  password       String
  name           String
  role           UserRole
  phoneNumber    String?
  isActive       Boolean  @default(true)
  lastLoginAt    DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  institution    Institution? @relation(fields: [institutionId], references: [id])
  institutionId  String?
  payslips       Payslip[]
  passwordResets PasswordReset[]

  @@map("users")
}

model Institution {
  id              String   @id @default(cuid())
  name            String
  email           String   @unique
  phoneNumber     String?
  address         String?
  website         String?
  logo            String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  users           User[]
  staff           Staff[]
  payslips        Payslip[]
  subscriptions   Subscription[]
  payments        Payment[]

  @@map("institutions")
}

model Staff {
  id             String   @id @default(cuid())
  name           String
  email          String
  employeeId     String?
  department     String?
  position       String?
  salary         Decimal?
  isActive       Boolean  @default(true)
  joinedDate     DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  institution    Institution @relation(fields: [institutionId], references: [id])
  institutionId  String
  payslips       Payslip[]

  @@unique([email, institutionId])
  @@map("staff")
}

model Subscription {
  id              String             @id @default(cuid())
  planName        String
  planPrice       Decimal
  billingCycle    String // monthly, yearly
  status          SubscriptionStatus @default(PENDING)
  startDate       DateTime?
  endDate         DateTime?
  trialEndDate    DateTime?
  stripeCustomerId String?
  stripeSubscriptionId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  institution     Institution @relation(fields: [institutionId], references: [id])
  institutionId   String
  payments        Payment[]

  @@map("subscriptions")
}

model Payment {
  id                String        @id @default(cuid())
  amount            Decimal
  currency          String        @default("NGN")
  status            PaymentStatus @default(PENDING)
  stripePaymentId   String?
  stripeInvoiceId   String?
  description       String?
  metadata          Json?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  institution       Institution @relation(fields: [institutionId], references: [id])
  institutionId     String
  subscription      Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId    String?

  @@map("payments")
}

model Payslip {
  id              String        @id @default(cuid())
  month           String
  year            Int
  grossPay        Decimal
  netPay          Decimal
  deductions      Decimal?
  allowances      Decimal?
  status          PayslipStatus @default(PROCESSING)
  filePath        String?
  fileName        String?
  uploadDate      DateTime      @default(now())
  processedAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  user            User? @relation(fields: [userId], references: [id])
  userId          String?
  staff           Staff? @relation(fields: [staffId], references: [id])
  staffId         String?
  institution     Institution @relation(fields: [institutionId], references: [id])
  institutionId   String

  @@unique([month, year, staffId])
  @@map("payslips")
}

model PasswordReset {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@map("password_resets")
}

model AuditLog {
  id          String   @id @default(cuid())
  action      String
  entityType  String
  entityId    String
  userId      String?
  institutionId String?
  details     Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  @@map("audit_logs")
} 